--==========================================================================================
-- PKG : Pkg Typing
--==========================================================================================
LIBRARY ieee; 
USE ieee.std_logic_1164.all;
PACKAGE reg_dmem IS
TYPE rgstrs  IS ARRAY (0 to 15) OF STD_LOGIC_VECTOR(7 DOWNTO 0);                      --16x8
TYPE dmemory IS ARRAY (0 to 7)  OF STD_LOGIC_VECTOR(7 DOWNTO 0);                       --4x8
SIGNAL rgstr:rgstrs := ( "00000000",                                                   --(0)
                         "00000001",                                                   --(1)
                         "00000010",                                                   --(2)
                         "00000011",                                                   --(3)
                         "00000100",                                                   --(4)
                         "00000101",                                                   --(5)
                         "00000110",                                                   --(6)
                         "00000111",                                                   --(7)
                         "00001000",                                                   --(8)
                         "00001001",                                                   --(9)
                         "00001010",                                                  --(10)
                         "00001011",                                                  --(12)
                         "00001100",                                                  --(13)
                         "00001101",                                                  --(14)
                         "00001110",                                                  --(15)
                         "00001111");                                                 --(16)
END reg_dmem;

--==========================================================================================
-- RB : Register Bank
--==========================================================================================
LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;
USE WORK.reg_dmem.ALL;

ENTITY RB IS                                                         
 PORT(Rdx,Rdy,Wr : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);                           --RF Address
      WrBk       : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);                        --DMEM/ALU 2 RB
      ls         : IN  STD_LOGIC;                                         --Write Register?
      RegWr      : IN  BIT;                              
      Interrupts : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);                              --Copy2SP
      Rx,Ry      : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);                              --RB Data
      rgstr_bnk  : OUT rgstrs);                                                   --Copy2SP                   
END RB;    

ARCHITECTURE RB OF RB IS
BEGIN 
PROCESS(Rdx,Rdy,Wr,WrBk,ls,Interrupts)
 BEGIN
 Rx <= rgstr(conv_integer(Rdx)); 
 Ry <= rgstr(conv_integer(Rdy));
 
-- if ls ='1' AND RegWr = '1' then   
-- rgstr(conv_integer(Wr)) <= WrBk;
-- end if;
 
-- if Interrupts /= "0000" and ClkCycle = "10" then   
-- rgstr_bnk <= rgstr;
-- end if;   
END PROCESS;
END RB;

--==========================================================================================
-- DMEM : Points at address of Data Memory
--==========================================================================================
LIBRARY IEEE; 
USE IEEE.STD_LOGIC_1164.all;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;
USE WORK.reg_dmem.ALL;

ENTITY DMEM IS                                                        
 PORT(ls    : IN STD_LOGIC;                                            --Ld/Str:Drct/Indrct
      dAddr : IN STD_LOGIC_VECTOR(7 DOWNTO 0);                                   --ADDR_MUX
      memd  : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0));                               --DATA_MUX
END DMEM;   

ARCHITECTURE DMEM OF DMEM IS
SIGNAL dmemory :dmemory;
BEGIN 
 PROCESS(dAddr,memd)
 BEGIN
 if ls = '0' then  
 memd <= dmemory(conv_integer(dAddr));                               --load:Memory2Register
 elsif ls = '1' then
 dmemory(conv_integer(dAddr))<=memd;                                --store:Register2Memory
 end if;
 END PROCESS;
END DMEM;

--==========================================================================================
-- MUX : Register/Indirect Mux
--==========================================================================================
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.std_logic_misc.all;
Use ieee.std_logic_arith.all; 
Use ieee.std_logic_unsigned.all;

ENTITY DMUX IS
  GENERIC(N:integer:=8);
  PORT ( sel    : IN  BIT;
         In0,In1: IN  STD_LOGIC_VECTOR(N-1 downto 0);          
         output : OUT STD_LOGIC_VECTOR(N-1 downto 0));
END DMUX;

ARCHITECTURE DMUX OF DMUX IS 
BEGIN 
  output <= In0 when (sel = '0') else In1 when (sel = '1');         
END DMUX;


--==========================================================================================
-- AMUX : ALU ROI Mux
--==========================================================================================
Library ieee;
Use ieee.std_logic_1164.all;
Use ieee.std_logic_misc.all;
Use ieee.std_logic_arith.all; 
Use ieee.std_logic_unsigned.all;

ENTITY AMUX IS
  GENERIC(N:integer:=8);
  PORT ( sel        : IN  STD_LOGIC_VECTOR(1 downto 0);
         In0,In1,In2: IN  STD_LOGIC_VECTOR(N-1 downto 0);          
         output     : OUT STD_LOGIC_VECTOR(N-1 downto 0));
END AMUX;

ARCHITECTURE AMUX OF AMUX IS 
BEGIN 
PROCESS(sel,In0,In1,In2)
 BEGIN
  if    sel = "00" then output <= In0;
  elsif sel = "01" then output <= In1;
  elsif sel = "10" then output <= In2;
  end if;
 -- output <= In0 when (sel = "00") else In1 when (sel = "01") 
 --     else In2 when (sel = "10");         
END PROCESS;
END AMUX;

--==========================================================================================
-- execute : Execute with ALU and DMEM 
-- To WB: Interrupts,LS,RegWr,Wr
--==========================================================================================
LIBRARY ieee; 
USE IEEE.std_logic_1164.all;
USE IEEE.std_logic_misc.all;
USE IEEE.std_logic_arith.all;
USE IEEE.std_logic_unsigned.all;
USE IEEE.std_logic_arith.all;
USE IEEE.numeric_std.ALL;
USE WORK.reg_dmem.ALL;

ENTITY execute is
  GENERIC(N:integer:=16);
  PORT (clk                 : IN STD_LOGIC;
        ALUopEXE,SelEXE     : IN STD_LOGIC_VECTOR(3 DOWNTO 0);                         --ALU
        RdxEXE,RdyEXE       : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
        WrIn                : IN STD_LOGIC_VECTOR(3 DOWNTO 0);                        --WrBk
        WrOut               : BUFFER STD_LOGIC_VECTOR(3 DOWNTO 0);                    --WrBk
        OffsetEXE           : IN STD_LOGIC_VECTOR(7 DOWNTO 0);                --BrnchTo 11**
        IMdataEXE           : IN STD_LOGIC_VECTOR(7 DOWNTO 0);                         --IMM 
        ROIEXE              : IN STD_LOGIC_VECTOR(1 DOWNTO 0):="00";         --Ry/Offset/IM?
       
        LSIn,RIEXE          : IN STD_LOGIC;                            --Ld/Str Rgstr/Indrct
        LSOut               : BUFFER STD_LOGIC;                            --Ld/Str Rgstr/Indrct
        RlsEXE,WrBk         : IN STD_LOGIC_VECTOR(7 DOWNTO 0);              --#addrss@(R LS)
        RegWrEXE            : IN BIT;                                            --Wr Rgstr?
        
        memd                : BUFFER STD_LOGIC_VECTOR(7 DOWNTO 0);               --DMEM data                     
        ALUout,ACC          : OUT STD_LOGIC_VECTOR(7 downto 0);                        --ALU 
        
        rgstr_bnk           : OUT rgstrs;                                          --Copy2SP
        InterruptsIn        : IN STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";
        InterruptsOut       : BUFFER STD_LOGIC_VECTOR(3 DOWNTO 0):="0000");            --Clk 2 
END execute;

ARCHITECTURE execute OF execute IS 
-------------------------------------------------------------------------------------ON CLK--
signal ALUop,Sel            : STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";
signal Rdx,Rdy,Wr           : STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";
signal Offset               : STD_LOGIC_VECTOR(7 DOWNTO 0):="00000000";   --BrnchTo 11**
signal IMdata               : STD_LOGIC_VECTOR(7 DOWNTO 0):="00000000";            --IMM 
signal ROI                  : STD_LOGIC_VECTOR(1 DOWNTO 0):="00";        --Ry/Offset/IM?
signal LS,RI                : STD_LOGIC:='0'; 
signal Rls                  : STD_LOGIC_VECTOR(7 DOWNTO 0):="00000000";
signal RegWr                : BIT:='0';    
signal Interrupts           : STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";
----------------------------------------------------------------------------------------ALU--
signal Rx,Ry                : STD_LOGIC_VECTOR(7 DOWNTO 0);                  --DMEM data 
signal shift_dir,sl,sr,Cin  : STD_LOGIC:='0';
signal memdata:STD_LOGIC_VECTOR(7 downto 0);
signal memack :STD_LOGIC;
signal Cout   :STD_LOGIC:='0';
signal dAddr  :STD_LOGIC_VECTOR(7 downto 0);
---------------------------------------------------------------------------------------------
signal exct_generate        : BIT:='1';

COMPONENT RB 
PORT(Rdx,Rdy,Wr : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);       
     WrBk       : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
     ls         : IN  STD_LOGIC;                                               --Write Register?
     RegWr      : IN  BIT;                              
     Interrupts : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);                                --**--
     Rx,Ry      : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
     rgstr_bnk  : OUT rgstrs);                                                     --**--
END COMPONENT;
      
COMPONENT Amux IS
  GENERIC(N:integer:=8);
  PORT ( sel         : IN  STD_LOGIC_VECTOR(1 downto 0);
         In0,In1,In2 : IN  STD_LOGIC_VECTOR(N-1 downto 0);          
         output      : OUT STD_LOGIC_VECTOR(N-1 downto 0));
END COMPONENT;

COMPONENT ALU
  GENERIC(N:integer:=8);
  PORT(shift_dir,sl,sr:IN STD_LOGIC;
	     opcode,Sel : IN STD_LOGIC_VECTOR(3 downto 0);  
	     Ain,Bin: IN STD_LOGIC_VECTOR(N-1 downto 0);
	     Cin    : IN STD_LOGIC:='0';
	
	     memdata: IN STD_LOGIC_VECTOR(N-1 downto 0);
	     memack : IN STD_LOGIC;
	
	     ALUout,ACC : OUT STD_LOGIC_VECTOR(N-1 downto 0);
	     Cout     : OUT STD_LOGIC:='0'); 
END COMPONENT;
 
COMPONENT DMUX 
 PORT (Sel    : IN BIT;
       In0,In1: IN  STD_LOGIC_VECTOR(N-1 downto 0);          
       output : OUT STD_LOGIC_VECTOR(N-1 downto 0));
END COMPONENT;

COMPONENT DMEM
PORT(ls    : IN BIT;
     dAddr : IN    STD_LOGIC_VECTOR(7 DOWNTO 0);
     data  : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0));
END COMPONENT;
---------------------------------------------------------------------------------------------
BEGIN
 PROCESS(clk) 
 BEGIN
  IF (clk'event and clk = '1') THEN
   ALUop<=ALUopEXE;sel<=selEXE;
   Rdx<=RdxEXE; Rdy<=RdyEXE; WrOut<=WrIn;
   Offset<=OffsetEXE;IMdata<=IMdataEXE;
   ROI<=ROIEXE;LSOut<=LSIn;RI<=RIEXE;
   Rls<=RlsEXE;RegWr<=RegWrEXE;
   InterruptsOut<=InterruptsIn;   
  END IF;
 END PROCESS;
 
 --EXE_generate:if (clk'event and clk = '1') generate
 RBNK       : RB  PORT MAP(Rdx,Rdy,WrOut,Wrbk,LSOut,RegWr,InterruptsOut,Rx,Ry,rgstr_bnk);

 --ALU_MUX    : AMUX PORT MAP(ROI,Rx,Offset,IMdata,Rx);                 --Y=Ry/Offset/IM?   
 RISC_ALU   : ALU PORT MAP(shift_dir,sl,sr,ALUop,sel,Rx,Ry,
                           Cin,memdata,memack,ALUout,ACC,Cout);
   
 -- ADDR_MUX : DMUX PORT MAP(RI,rls,Ry,dAddr);                               --DMEM address  
 -- DATA_MUX : DMUX PORT MAP(LSOut,Rx,WrBk,memd);                   --DMEM data 0@ld:Rx 1@st:Wr 
 -- DM       : DMEM PORT MAP(LSOut,dAddr,memd);   --DMEM:ls,{Address:rls/[Rdy]},{Data:[Rdx]/wr}  
--END GENERATE;
END execute;
