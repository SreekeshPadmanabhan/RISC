--==========================================================================================
-- Decoder : Instruction Decomposer
--==========================================================================================
LIBRARY IEEE; 
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;
USE IEEE.NUMERIC_STD.ALL;

ENTITY Decoder IS  
 PORT(clk         : IN STD_LOGIC;
      instruction : IN STD_LOGIC_VECTOR(15 DOWNTO 0):="0000000000000000";         --Frm IMEM
      Interrupts  : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0) := "0000";                 --4Intrrpt
      
      ALUop,SEL   : OUT STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";                          --ALU  
      Rdx,Rdy,Wr  : OUT STD_LOGIC_VECTOR(3 DOWNTO 0):="0000";                           --RB 
       
      PCAddr      : INOUT STD_LOGIC_VECTOR(11 DOWNTO 0);                          --+ Offset
      Offset      : OUT   STD_LOGIC_VECTOR(7 DOWNTO 0);                            --BrnchTo 
      
      IMdata,Rls  : OUT STD_LOGIC_VECTOR(7 DOWNTO 0):="00000000";       --Imm/#addrss@(R LS)  
      ROI         : OUT STD_LOGIC_VECTOR(1 DOWNTO 0):="00";
      LS,RI       : OUT STD_LOGIC;                                         --IM control/DMEM
      
      RegWr,RET   : OUT BIT:='0');                                          --DMEM/RB/RET@IH                                  
END Decoder;     
 
ARCHITECTURE Decoder OF Decoder IS 
signal Interrupts_Buf :STD_LOGIC_VECTOR(3 DOWNTO 0):= "0000";                   --Interrupts

BEGIN 
PROCESS(Interrupts)                                                               --EI:R(20)
BEGIN
 IF instruction(15 downto 12) = 0111 then                                          
  Interrupts_Buf<=Interrupts;
  Interrupts_Buf<=Instruction(3 downto 0) and Interrupts_Buf;
  Interrupts<=Interrupts_Buf;--SOI<='1'; 
 END IF; 
END PROCESS; 

PROCESS(clk,instruction)
BEGIN
--IF(clk'EVENT and clk = '1') THEN 
 IF(instruction(15) = '0' and instruction(15 downto 12) /= 0000) THEN              --3 to 20  
  ALUop <= instruction(15 downto 12);sel <= instruction(11 downto 8);
  Rdx   <= instruction(3  downto 0) ;Rdy <= instruction(7  downto 4); 
  ROI   <= "00";
 END IF;

 IF instruction(15 downto 12) = 0000 then                                         --ADD:IM(2)
  ALUop <= instruction(15 downto 12);Rdx<= instruction(11 downto 8);
  IMdata<= instruction(7 downto 0);ROI<="10";
 ELSIF instruction(15 downto 12) = 0001 then                                       --NOP R(3)
   
 ELSIF instruction(15 downto 12) = 0010 AND instruction(11 downto 8) = 0000 then   --ADD:R(4)

 ELSIF instruction(15 downto 12) = 0010 AND instruction(11 downto 8) = 0001 then   --SUB:R(5)

 ELSIF instruction(15 downto 12) = 0011 AND instruction(11 downto 8) = 0000 then   --INC:R(6)

 ELSIF instruction(15 downto 12) = 0011 AND instruction(11 downto 8) = 0001 then   --DEC:R(7)

 ELSIF instruction(15 downto 12) = 0100 AND instruction(11 downto 8) = 0000 then   --SHL:R(8)

 ELSIF instruction(15 downto 12) = 0100 AND instruction(11 downto 8) = 0001 then   --SHR:R(9)  

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0000 then  --NOT:R(10)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0001 then  --NOR:R(11)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0010 then --NAND:R(12)
 
 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0011 then  --XOR:R(13)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0100 then  --AND:R(14)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0101 then   --OR:R(15)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0110 then  --CLR:R(16)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 0111 then  --SET:R(17)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 1111 then  --SLT:R(18)

 ELSIF instruction(15 downto 12) = 0101 AND instruction(11 downto 8) = 1000 then  --MOV:R(19)

 ELSIF instruction(15 downto 12) = 0111 then                                       --EI:R(20)                                      
  Interrupts_Buf<=Interrupts;
  Interrupts_Buf<=Instruction(3 downto 0) and Interrupts_Buf;
  Interrupts<=Interrupts_Buf; 
 ------------------------------------------------------------------------------------------------
 ELSIF instruction(15 downto 12) = 1000 then                   --LD[EM]Memory To Register(25)
  RI<='0';LS<='1';RegWr<='1';                                          --Ld=0;Indrct=0;Read           
  Rdy<=instruction(7 downto 4);wr<=instruction(11 downto 8);    --read frm [Rdy]->Register wr
  
 ELSIF instruction(15 downto 12) = 1001 then                      --STR[EM]Register to memory
  RI<='0';LS<='0';RegWr<='0';                                          --Write;Str=1;Indrct=0
  Rdy<=instruction(7 downto 4);Rdx<=instruction(11 downto 8);
  
 ELSIF instruction(15 downto 12) = 1010 then                       --LD[EM]Memory To Register
  RI<='1';LS<='1';RegWr<='1';                                           --Ld=0;Rgstr=1;Read           
  Rls<=instruction(7 downto 0);wr<=instruction(11 downto 8);      --read frm # -> Register wr 
   
 ELSIF instruction(15 downto 12) = 1011 then                      --STR[EM]Register to Memory
  RI<='1';LS<='0';RegWr<='0';                                      --Write;Store=1;Register=1
  Rls<=instruction(7 downto 0);Rdx<=instruction(11 downto 8);          
 ------------------------------------------------------------------------------------------------
 ELSIF instruction(15 downto 12) = 1111 AND instruction(11 downto 8) = 0000 then --JMP:BR(25)
  PCAddr<= instruction(11 downto 0);
 ELSIF instruction(15 downto 12) = 1111 AND instruction(11 downto 8) = 0001 then  --JZ:BR(26)
  Offset<=instruction(11 downto 0);ROI<="01";
   --IF R[x] == 0;Brnch <= '1';--PCAddr<=;END IF;
 ELSIF instruction(15 downto 12) = 1111 AND instruction(11 downto 8) = 0010 then --JNZ:BR(27)
  Offset<=instruction(11 downto 0);ROI<="01";
  --IF R[X] != 0;Brnch <= '1';--PCAddr<=;END IF;   
 ELSIF instruction(15 downto 12) = 1111 AND instruction(11 downto 8) = 0011 then --RETI:BR(28)
   RET <= '1';                --PCAddr<=PC'+1; Brnch <= '1'; {SPUnload@ RETI Interrupts = 0000} 
 END IF;
--END IF;  
END PROCESS; 
END Decoder; 
